name: .NET CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
  pull_request:
    branches:
      - main

permissions:
  id-token: write  # Permissões para gerar o id-token

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      
      - name: Debug secrets usage
        run: |
          echo "Using ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}"
          echo "Using AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}"
          echo "Using AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Restore dependencies
        run: dotnet restore AuthService.sln

      - name: Build
        run: dotnet build AuthService.sln --configuration Release

      # - name: Start RabbitMQ
      #   run: |
      #     docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management
      #     sleep 10
      #     for i in {1..10}; do
      #       if curl -u guest:guest -f http://localhost:15672/api/healthchecks/node > /dev/null 2>&1; then
      #         echo "RabbitMQ is ready"
      #         exit 0
      #       fi
      #       echo "Waiting for RabbitMQ to start... Attempt $i of 10"
      #       sleep 5
      #     done
      #     echo "RabbitMQ failed to start"
      #     exit 1

      - name: Set Environment Variables
        run: |
          echo "RABBITMQSETTINGS__HOST=localhost" >> $GITHUB_ENV
          echo "RABBITMQSETTINGS__USERNAME=guest" >> $GITHUB_ENV
          echo "RABBITMQSETTINGS__PASSWORD=guest" >> $GITHUB_ENV

      - name: Start API in Background
        env:
          ASPNETCORE_URLS: http://localhost:5010
        run: |
          cd AuthService.Api/bin/Release/net9.0/
          dotnet AuthService.Api.dll & disown
          sleep 5

      - name: Wait for API to Start
        run: |
          for i in {1..10}; do
            echo "Tentando acessar endpoint de health..."
            curl -v http://localhost:5010/auth/health || true
            if curl -f http://localhost:5010/auth/health > /dev/null 2>&1; then
              echo "API started successfully"
              exit 0
              fi
              echo "Waiting for API to start... Attempt $i of 10"
              sleep 3
            done
            echo "API failed to start"
            exit 1

      - name: Test API Health
        run: curl -f http://localhost:5010/auth/health || exit 1

      # - name: Test API Metrics
      #   run: curl -f http://localhost:5010/criar/contato/metrics || exit 1

      # - name: Run Unit Tests        
      #   run: dotnet test CriarContatos.Test/CriarContatos.Test.csproj --configuration Release --logger "console;verbosity=detailed"

      - name: Publish
        run: dotnet publish AuthService.Api/AuthService.Api.csproj --configuration Release --output AuthService.Api/publish

      # --- Adicionando as etapas de Docker, ACR e AKS ---
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: d8474ed9-45a6-4b74-9ccd-a0fe6f5c421f
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: 6837c849-6303-4e99-a99f-316f98266202

      - name: Log in to Azure CLI (Using Managed Identity)
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Verificar se o cluster Kubernetes está acessível
        run: |
          if kubectl cluster-info; then
            echo "Cluster Kubernetes está acessível"
          else
            echo "Falha ao acessar o cluster Kubernetes"
            exit 1
          fi

      - name: Log in to Azure Container Registry (ACR)
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/producer-criar-contatos:latest -f AuthService.Api/Dockerfile .

      - name: Push Docker image to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/producer-criar-contatos:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ secrets.AKS_RESOURCE_GROUP }}'
          cluster-name: '${{ secrets.AKS_CLUSTER_NAME }}'

      - name: Update Kubernetes Resources
        run: |
          # Aplica ConfigMap (cria ou atualiza se necessário)
          kubectl apply -f AuthService.Api/k8s/producer-criar-contatos-configmap.yml

          # Aplica Deployment (cria ou atualiza se necessário)
          kubectl apply -f AuthService.Api/k8s/producer-criar-contatos-deployment.yml

          # Aplica PVC e PV (apenas cria ou atualiza, sem deletar)
          kubectl apply -f AuthService.Api/k8s/producer-criar-contatos-persistent-volume.yml
          kubectl apply -f AuthService.Api/k8s/producer-criar-contatos-persistent-volume-claim.yml

          # Aplica Service (cria ou atualiza se necessário)
          kubectl apply -f AuthService.Api/k8s/producer-criar-contatos-service.yml

          # Aplica o Ingress (cria ou atualiza o roteamento externo)
          kubectl apply -f AuthService.Api/k8s/producer-criar-contatos-ingress.yml

          # Espera o rollout do Deployment para garantir que a atualização foi bem-sucedida
          kubectl rollout status deployment/producer-criar-contatos-deployment
      
      - name: Update AKS Deployment with new image
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            AuthService.Api/k8s/producer-criar-contatos-deployment.yml
            AuthService.Api/k8s/producer-criar-contatos-service.yml
          images: |
            ${{ secrets.ACR_LOGIN_SERVER }}/producer-criar-contatos:latest
          # imagepullsecrets: |
          #   acr-auth

      - name: Cleanup
        if: always()
        run: |
          docker rm -f rabbitmq || true
          docker volume prune -f
